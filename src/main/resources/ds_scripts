drop table node CASCADE ;
drop table assign_attribute ;
drop table attribute_value CASCADE;
drop table graph_link CASCADE;


create table node (
    id VARCHAR(40) primary key,
    type VARCHAR(40),
    name VARCHAR(40) not null
--     part_of VARCHAR(40) references node(id)
);

create table measures (
    id UUID primary key,
    event text,
    times integer,
    total_time integer,
    time timestamp
)

create table attribute_value (
    id VARCHAR(40) primary key,
    boolean_attr_value boolean
);

create table assign_attribute (
    id VARCHAR(40) primary key,
    node_id VARCHAR(40) references node(id),
    attr_value_id VARCHAR(40) references attribute_value(id)
);

create table graph_link (
    id VARCHAR(40) PRIMARY KEY,
    left_node VARCHAR(40),
    right_node VARCHAR(40),
    CONSTRAINT graph_link_fkey1 FOREIGN KEY (left_node)
        REFERENCES node (id)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION,
    CONSTRAINT graph_link_fkey2 FOREIGN KEY (right_node)
        REFERENCES node (id)
        ON UPDATE NO ACTION
        ON DELETE NO ACTION
);


 -- fetch subtree in root of
WITH RECURSIVE q AS
(SELECT *, 1 AS level FROM node n WHERE n.id = '897bec36-62ec-4b94-8fc6-a6254200bdba'
    UNION ALL
  SELECT n.*, 1 + level AS level FROM graph_link l
  JOIN q ON l.right_node = q.id
  JOIN node n ON n.id = l.left_node
)
SELECT * FROM q;


-- isNOdeDecendantOfAnother

WITH RECURSIVE q AS (
  SELECT n.* FROM node n
  JOIN graph_link l ON n.id = l.right_node
  WHERE l.left_node = '4fe252f3-ccf4-47ae-bdc8-a99b2956aad'
    UNION ALL
  SELECT n.* FROM graph_link l
  JOIN q ON q.id = l.left_node
  JOIN node n ON n.id = l.right_node
)
SELECT CASE WHEN COUNT(*) > 0 THEN TRUE ELSE FALSE END
FROM q
WHERE q.id = '139855a49-6c1d-4b85-8065-43f7b1c5235a';



-- Neo4j scripts

MATCH (n)-[r:PART_OF]-(a) DELETE r;
MATCH (n:node) DELETE n;